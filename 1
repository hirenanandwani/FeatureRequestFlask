from flaskapp import app
import unittest
import json
from flask import request, jsonify


class FlaskTestCase(unittest.TestCase):

	def test_index(self):
		tester = app.test_client(self)
		response = tester.get('/',content_type='html/text')
		self.assertEqual(response.status_code, 200)

	def test_ind(self):
		tester = app.test_client(self)
		response=tester.post('/regions', data=json.dumps(dict(Title='bar',Description='Bye',Client='Client A',Product='Claim',Priority='1',TargetDate='24/6/2018')),content_type='application/json')
		#self.assertFalse(response.data != 'Data Inserted Successfully')
		#assert response.data == '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\n'
	
		assert response.data == 'Data Inserted Successfully'


	def test_incomplete_data(self):
                tester = app.test_client(self)
                response=tester.post('/clientFeatures', data=json.dumps(dict(Title='Bar'), content_type='application/json')
                #self.assertFalse(response.data != 'Data Inserted Successfully')
                #assert response.data == '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\n'


		asert response.data == "Data Returned"


if __name__ == '__main__':
	unittest.main()
