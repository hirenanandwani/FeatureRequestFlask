from flaskapp import app
import unittest, json
from flask import request, jsonify
import sys, argparse


class FlaskTestCase(unittest.TestCase):

#######Test_Case -1 : Testing the Welcome Page

	def test_index(self):
		tester = app.test_client(self)
		response = tester.get('/',content_type='html/text')
		self.assertEqual(response.status_code, 200)


#######Test_Case -2 : Tesing Data Insert in Database

	def test_ind(self):
		tester = app.test_client(self)
		response=tester.post('/regions', data=json.dumps(dict(Title='bar',Description='Bye',Client='Client A',Product='Claim',Priority='1',TargetDate='24/6/2018')),content_type='application/json')
		#self.assertFalse(response.data != 'Data Inserted Successfully')
		#assert response.data == '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\n'
	
		#assert response.data == 'Data Inserted Successfully'
		self.assertEqual(response.status_code, 200)


#######Test_Case -3 : Fetching Client Features from Database to Display


	def test_client_features_fetch(self):
                tester = app.test_client(self)
                response=tester.post('/clientFeatures', data=json.dumps(dict(client='Client A')), content_type='application/json')
		self.assertEqual(response.status_code, 200)

	def test_client_features_fetch(self):
                tester = app.test_client(self)
                response=tester.post('/clientFeatures', data=json.dumps(dict(client='Client E')), content_type='application/json')
		if not response:
			pass
		else:
			fail
                #self.assertEqual(response.status_code, 200)

#######Test_Case -4 : Checking Valid Priority Details
	
	def test_valid_priority(self):
                tester = app.test_client(self)
                response=tester.post('/regions', data=json.dumps(dict(Title='bar',Description='Bye',Client='Client A',Product='Claim',Priority='2',TargetDate='24/6/2018')),content_type='application/json')

                self.assertEqual(response.status_code, 200)

#######Test_Case -5 : Checking Invalid Priority Details
	
	def test_invalid_priority(self):
                tester = app.test_client(self)
                response=tester.post('/regions', data=json.dumps(dict(Title='bar',Description='Bye',Client='Client A',Product='Claim',Priority='-1',TargetDate='24/6/2018')),content_type='application/json')

                self.assertEqual(response.status_code, 500)


#######Test_Case -6 : Testing the Front-End

	def test_frontend_lang(self):
 
        	#r = requests.get("http://127.0.0.1:5000/")
		tester = app.test_client(self)
		response = tester.get('/',content_type='html/text')
        	page_src = response.data
 
        	if page_src.find("FEATURE REQUEST APP") < 0:
            		self.fail("Do not find data in page")

		


	



if __name__ == '__main__':

	#parser = argparse.ArgumentParser()
	#parser.add_argument('unittest_args', nargs='*')
	#args = parser.parse_args()
	#sys.argv[1:] = args.unittest_args
	command_line_param = sys.argv[1]
    	del sys.argv[1]
	unittest.main()
